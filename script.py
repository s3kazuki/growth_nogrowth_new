{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e242779e-3b79-45d9-990a-dd007258fc28",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.api as sm\n",
    "\n",
    "#データの読み込み\n",
    "@st.cache(allow_output_mutation=True)\n",
    "def load_data():\n",
    "    d = pd.read_csv(\"data_demo.csv\")\n",
    "    return d\n",
    "d = load_data()\n",
    "\n",
    "# 表示用データの加工\n",
    "d_out = d.copy()\n",
    "d_out['N0'] = round(d_out['N0'], 1)\n",
    "d_out['pH'] = round(d_out['pH'], 1)\n",
    "d_out['aw'] = round(d_out['aw'], 2)\n",
    "\n",
    "\n",
    "#データの確認\n",
    "st.title(\"Growth/no growth boundary\")\n",
    "st.sidebar.title(\"Input data set(rounded)\")\n",
    "st.sidebar.write(d_out)\n",
    "st.sidebar.title(\"Summary of data\")\n",
    "st.sidebar.write(d_out.describe())\n",
    "\n",
    "option = st.selectbox(\n",
    "    'How would you like to change?',\n",
    "     ('pH', 'a$_w$', 'Temperature'))\n",
    "\n",
    "#全要因総当たりモデル\n",
    "@st.cache(allow_output_mutation=True)\n",
    "def probability(params, data):\n",
    "    \"\"\"\n",
    "    確率 p を計算する関数\n",
    "    params: [β0, β1, β2, β3, β4, β5, β6, n] （推定するパラメータ）\n",
    "    Temp, pH, Salt: モデルの入力データ\n",
    "    \"\"\"\n",
    "    Temp, pH, aw, n = data['Temp'], data['pH'], data['aw'], data['N0']\n",
    "    β0, β1, β2, β3, β4, β5, β6 = params\n",
    "    # 線形予測子 η の計算\n",
    "    eta = (\n",
    "        β0 +\n",
    "        β1 * Temp +\n",
    "        β2 * pH +\n",
    "        β3 * aw +\n",
    "        β4 * (Temp * pH) +\n",
    "        β5 * (Temp * aw) +\n",
    "        β6 * (pH * aw)\n",
    "    )\n",
    "    # 改良された確率計算式\n",
    "    base_prob = 1 / (1 + np.exp(-eta))  # ロジスティック関数\n",
    "    p = 1 - (1 - base_prob) ** n\n",
    "    return p\n",
    "\n",
    "# 尤度関数の定義\n",
    "def negative_log_likelihood(params, data):\n",
    "    \"\"\"\n",
    "    負の対数尤度を計算する関数（最適化対象）\n",
    "    params: [β0, β1, β2, β3, β4, β5, β6]\n",
    "    Temp, pH, Salt, n: 説明変数\n",
    "    gng: 応答変数（観測データ, 0 または 1）\n",
    "    \"\"\"\n",
    "    # 確率 p を計算\n",
    "    p = probability(params, data)\n",
    "    # 負の対数尤度の計算\n",
    "    epsilon = 1e-10  # 数値的安定性のための微小値\n",
    "    log_likelihood = np.sum(gng * np.log(p + epsilon) + (1 - gng) * np.log(1 - p + epsilon))\n",
    "    return -log_likelihood  # 負の対数尤度を返す\n",
    "\n",
    "# 初期パラメータの設定\n",
    "initial_params = [0.1] * 7  # [β0, β1, ..., β6]\n",
    "\n",
    "# 最適化の実行\n",
    "result = minimize(\n",
    "    negative_log_likelihood,  # 最適化する対象の関数\n",
    "    initial_params,  # 初期パラメータ\n",
    "    args=d,  # 関数に渡す追加引数\n",
    "    method='L-BFGS-B',  # 最適化手法\n",
    "    bounds=[(-10, 10)] * 7   # パラメータの範囲\n",
    ")\n",
    "\n",
    "# 最適化結果\n",
    "fitted_params = result.x\n",
    "\n",
    "if option == 'pH':\n",
    "\t#pHの入力\n",
    "\tpH_input = st.slider(\"pH\", 3.8, 6.4, 6.0, step=0.1)\n",
    "    n0_input = st.slider(\"N$_0$\", 1.0, 6.8, 3.0, step=0.2)\n",
    "\n",
    "\t#pHの値によるグラフの作成\n",
    "\tdpH = d_out[d_out['pH'] == pH_input]\n",
    "\tdpH_g = dpH[dpH['gng'] == 1]\n",
    "\tdpH_ng = dpH[dpH['gng'] == 0]\n",
    "\n",
    "\n",
    "\t#x軸は温度\n",
    "\tx = np.arange(3, 35, 0.01)\n",
    "\t#y軸は水分活性\n",
    "\ty = np.arange(0.88, 1.00, 0.0001)\n",
    "\t#z軸はph (%)\n",
    "\tz = np.arange(3.5, 7, 0.01)\n",
    "\n",
    "\t#P = 1-(1-f(x)) **n # シングルヒットモデルへのロジスティック回帰の当てはめ\n",
    "\tdef func(x,y):\n",
    "        eta = (\n",
    "            fitted_params[0] +\n",
    "            fitted_params[1] * x +\n",
    "            fitted_params[2] * pH_input +\n",
    "            fitted_params[3] * y +\n",
    "            fitted_params[4] * (x * pH_input) +\n",
    "            fitted_params[5] * (x * y) +\n",
    "            fitted_params[6] * (pH_input * y)\n",
    "            )\n",
    "        # 改良された確率計算式\n",
    "        base_prob = 1 / (1 + np.exp(-eta))  # ロジスティック関数\n",
    "\t\tP = 1 - (1 - base_prob) ** n0_input\n",
    "        return P\n",
    "\n",
    "\tX, Y = np.meshgrid(x, y)\n",
    "\tZ = func(X, Y)\n",
    "\n",
    "\tfig, ax = plt.subplots()\n",
    "\tim = ax.imshow(Z, extent=[3, 35, 0.88, 1.00], origin='lower', aspect='auto')\n",
    "\tplt.colorbar(im, ax=ax, label='Probability of growth')\n",
    "\tax.set_xlabel('Temperature (°C)', fontsize=12)\n",
    "\tax.set_ylabel('a$_w$ (–)', fontsize=12)\n",
    "\tax.tick_params(axis='both', which='major', labelsize=12)\n",
    "\tcs=ax.contour(x, y, Z, levels=[0.1, 0.2, 0.3, 0.4 ,0.5, 0.6, 0.7, 0.8, 0.9], linewidths=1, colors=['k', 'k', 'k'])\n",
    "\tax.scatter(dpH_ng['Temp'], dpH_ng['aw'], marker='s', s=50, color='black', label='No growth')\n",
    "\tax.scatter(dpH_g['Temp'], dpH_g['aw'], marker='o', s=50, color='white', edgecolors='black', label='Growth')\n",
    "\tax.clabel(cs)\n",
    "\tax.legend(fontsize=12)\n",
    "\tst.pyplot(fig)\n",
    "\n",
    "if option == 'a$_w$':\n",
    "\t#データの確認\n",
    "\n",
    "\t#awの入力\n",
    "\taw_input = st.slider(\"a$_w$\", 0.89, 1.00, 0.97, step=0.005)\n",
    "    n0_input = st.slider(\"N$_0$\", 1.0, 6.8, 3.0, step=0.2)\n",
    "    \n",
    "\t#Saltの値によるグラフの作成\n",
    "\tdaw = d_out[d_out['aw'] == aw_input]\n",
    "\tdaw_g = daw[daw['gng'] == 1]\n",
    "\tdaw_ng = daw[daw['gng'] == 0]\n",
    "\n",
    "\n",
    "\t#x軸は温度\n",
    "\tx = np.arange(3, 35, 0.01)\n",
    "\t#y軸はph\n",
    "\ty = np.arange(3.5, 7, 0.01)\n",
    "\t#z軸は水分活性\n",
    "\tz = np.arange(0.88, 1.00, 0.0001)\n",
    "\n",
    "\t#P = 1-(1-f(x)) **n # シングルヒットモデルへのロジスティック回帰の当てはめ\n",
    "\tdef func(x,y):\n",
    "        eta = (\n",
    "            fitted_params[0] +\n",
    "            fitted_params[1] * x +\n",
    "            fitted_params[2] * y +\n",
    "            fitted_params[3] * aw_input +\n",
    "            fitted_params[4] * (x * y) +\n",
    "            fitted_params[5] * (x * aw_input) +\n",
    "            fitted_params[6] * (y * aw_input)\n",
    "            )\n",
    "        # 改良された確率計算式\n",
    "        base_prob = 1 / (1 + np.exp(-eta))  # ロジスティック関数\n",
    "\t\tP = 1 - (1 - base_prob) ** n0_input\n",
    "        return P\n",
    "\n",
    "\tX, Y = np.meshgrid(x, y)\n",
    "\tZ = func(X, Y)\n",
    "\n",
    "\tfig, ax = plt.subplots()\n",
    "\tim = ax.imshow(Z, extent=[3, 35, 3.5, 7], origin='lower', aspect='auto')\n",
    "\tplt.colorbar(im, ax=ax, label='Probability of growth')\n",
    "\tax.set_xlabel('Temperature (°C)', fontsize=12)\n",
    "\tax.set_ylabel('pH', fontsize=12)\n",
    "\tax.tick_params(axis='both', which='major', labelsize=12)\n",
    "\tcs=ax.contour(x, y, Z, levels=[0.1, 0.2, 0.3, 0.4 ,0.5, 0.6, 0.7, 0.8, 0.9], linewidths=1, colors=['k', 'k', 'k'])\n",
    "\tax.scatter(daw_ng['Temp'], daw_ng['pH'], marker='s', s=50, color='black', label='No growth')\n",
    "\tax.scatter(daw_g['Temp'], daw_g['pH'], marker='o', s=50, color='white', edgecolors='black', label='Growth')\n",
    "\t\n",
    "\tax.legend(fontsize=12)\n",
    "\tax.clabel(cs)\n",
    "\tst.pyplot(fig)\n",
    "\n",
    "if option == 'Temperature':\n",
    "\t#温度の入力\n",
    "\ttemperature_input = st.slider(\"Temperature\", 4.0, 30.0, 20.0, step=0.1)\n",
    "    n0_input = st.slider(\"N$_0$\", 1.0, 6.8, 3.0, step=0.2)\n",
    "\n",
    "\t#温度の値によるグラフの作成\n",
    "\tdTemperature = d_out[d_out['Temp'] == temperature_input]\n",
    "\tdTemperature_g = dTemperature[dTemperature['gng'] == 1]\n",
    "\tdTemperature_ng = dTemperature[dTemperature['gng'] == 0]\n",
    "\n",
    "\t#x軸はpH\n",
    "    x = np.arange(3.5, 7, 0.01)\n",
    "\t#y軸は水分活性\n",
    "\ty = np.arange(0.88, 1.00, 0.0001)\n",
    "\t#z軸は温度\n",
    "    z = np.arange(3, 35, 0.01)\n",
    "\n",
    "\t#P = 1-(1-f(x)) **n # シングルヒットモデルへのロジスティック回帰の当てはめ\n",
    "\tdef func(x,y):\n",
    "        eta = (\n",
    "            fitted_params[0] +\n",
    "            fitted_params[1] * x +\n",
    "            fitted_params[2] * y +\n",
    "            fitted_params[3] * aw_input +\n",
    "            fitted_params[4] * (x * y) +\n",
    "            fitted_params[5] * (x * aw_input) +\n",
    "            fitted_params[6] * (y * aw_input)\n",
    "            )\n",
    "        # 改良された確率計算式\n",
    "        base_prob = 1 / (1 + np.exp(-eta))  # ロジスティック関数\n",
    "\t\tP = 1 - (1 - base_prob) ** n0_input\n",
    "        return P\n",
    "\n",
    "\tX, Y = np.meshgrid(x, y)\n",
    "\tZ = func(X, Y)\n",
    "\n",
    "\tfig, ax = plt.subplots()\n",
    "\tim = ax.imshow(Z, extent=[3.5, 7, 0.88, 1.00], origin='lower', aspect='auto')\n",
    "\tplt.colorbar(im, ax=ax, label='Probability of growth')\n",
    "\tax.set_xlabel('pH', fontsize=12)\n",
    "\tax.set_ylabel('a$_w$ (–)', fontsize=12)\n",
    "\tax.tick_params(axis='both', which='major', labelsize=12)\n",
    "\tcs=ax.contour(x, y, Z, levels=[0.1, 0.2, 0.3, 0.4 ,0.5, 0.6, 0.7, 0.8, 0.9], linewidths=1, colors=['k', 'k', 'k'])\n",
    "\tax.scatter(dTemperature_ng['pH'], dTemperature_ng['aw'], marker='s', s=50, color='black', label='No growth')\n",
    "\tax.scatter(dTemperature_g['pH'], dTemperature_g['aw'], marker='o', s=50, color='white', edgecolors='black', label='Growth')\n",
    "\tax.clabel(cs)\n",
    "\tax.legend(fontsize=12)\n",
    "\tst.pyplot(fig)\n",
    "\t\n",
    "\t\n",
    "\t\n",
    "import base64\n",
    "from io import BytesIO\n",
    "pdf_bytes = BytesIO()\n",
    "plt.savefig(pdf_bytes, format='pdf')\n",
    "plt.close(fig)\n",
    "    \n",
    "# ダウンロード用のリンクを生成\n",
    "pdf_data = pdf_bytes.getvalue()\n",
    "b64 = base64.b64encode(pdf_data).decode()\n",
    "href = f'<a href=\"data:application/pdf;base64,{b64}\" download=\"output.pdf\">Download Figure</a>'\n",
    "st.markdown(href, unsafe_allow_html=True)\n",
    "\n",
    "\n",
    "st.write(\"Other app: https://scrapbox.io/kentokoyama/web_application\")\n",
    "st.write(\"Contact: kento.koyama.123@gmail.com\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
